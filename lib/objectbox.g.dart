// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/category.dart';
import 'data/models/item.dart';
import 'data/models/item_package.dart';
import 'data/models/item_variant.dart';
import 'data/models/promotion.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5401018273546124526),
      name: 'Category',
      lastPropertyId: const IdUid(17, 4281070565156541539),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8257658666386374924),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9159864238056959842),
            name: 'idCategory',
            type: 9,
            flags: 2048,
            indexId: const IdUid(1, 4905264527371129061)),
        ModelProperty(
            id: const IdUid(3, 5027307927516392943),
            name: 'categoryName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8413388841854697352),
            name: 'isActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5300184411732820873),
            name: 'code',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 182247591934260991),
      name: 'ItemPackage',
      lastPropertyId: const IdUid(6, 4330234215894824037),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6796156321174168626),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5331961364789321388),
            name: 'idItem',
            type: 9,
            flags: 2048,
            indexId: const IdUid(2, 1091707878294889886)),
        ModelProperty(
            id: const IdUid(3, 612084223017594678),
            name: 'itemName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2845638088661437652),
            name: 'variantId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1675908538818483920),
            name: 'quantityItem',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4330234215894824037),
            name: 'itemPrice',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 4358767868100185192),
      name: 'ItemVariant',
      lastPropertyId: const IdUid(11, 8407400109989957200),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3871300596949785317),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1147385139796794403),
            name: 'idVariant',
            type: 6,
            flags: 8,
            indexId: const IdUid(3, 5406333433538432010)),
        ModelProperty(
            id: const IdUid(3, 7888385819018698225),
            name: 'variantName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6928048220957804443),
            name: 'itemPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3745543518942209875),
            name: 'stockItem',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3487152192485516044),
            name: 'skuNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3157270472246314433),
            name: 'barcodeNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1360342434210505337),
            name: 'promotions',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 1166897459912520224),
      name: 'Item',
      lastPropertyId: const IdUid(19, 4222066207772647964),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8992820008613876448),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1542912270316258703),
            name: 'idItem',
            type: 9,
            flags: 2048,
            indexId: const IdUid(4, 1240910611640086350)),
        ModelProperty(
            id: const IdUid(3, 4317306195535945048),
            name: 'itemName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4763375201495018458),
            name: 'itemPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8075452207938021225),
            name: 'isActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4506509392451184831),
            name: 'obsolete',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5237958705227334204),
            name: 'isPackage',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5771981969123071712),
            name: 'manualDiscount',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 229550051909560886),
            name: 'isManualPrice',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5765845091440420855),
            name: 'stockControl',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3378384863634485583),
            name: 'idCategory',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7883589399064394301),
            name: 'stockItem',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 927924552915369238),
            name: 'sku',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 3426065220939393555),
            name: 'barcode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 2836790725752673047),
            name: 'categoryName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 8164503982260194336),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 1291892344623309815),
            name: 'lastAdjustment',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 8538847107548712130),
            name: 'promotions',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 4222066207772647964),
            name: 'packageCategories',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 8755826672230174999),
            name: 'variants',
            targetId: const IdUid(3, 4358767868100185192)),
        ModelRelation(
            id: const IdUid(2, 8646590383799585272),
            name: 'packageItems',
            targetId: const IdUid(2, 182247591934260991))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 3416884017836823244),
      name: 'AssignGroup',
      lastPropertyId: const IdUid(5, 7145756788115252046),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2848395048967887567),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 4883287139355924100),
            name: 'groupId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6163049422038459360),
            name: 'groupName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7145756788115252046),
            name: 'idAssignGroup',
            type: 9,
            flags: 2048,
            indexId: const IdUid(7, 3923032764072812511))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 4037611196117836389),
      name: 'ItemRequirement',
      lastPropertyId: const IdUid(7, 1136049028751001218),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9129969653569869075),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 1030760563141701406),
            name: 'requirementProductType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8422315073375550524),
            name: 'requirementProductId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 9059137639370666324),
            name: 'requirementVariantId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2738953187958283902),
            name: 'requirementProductName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1136049028751001218),
            name: 'idItemRequirement',
            type: 9,
            flags: 2048,
            indexId: const IdUid(8, 2676789648765722487))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 9072647444006103348),
      name: 'Promotion',
      lastPropertyId: const IdUid(37, 4337190883899751073),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4279856923813747760),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 657431034939374334),
            name: 'idPromotion',
            type: 9,
            flags: 2048,
            indexId: const IdUid(6, 4943718320745457326)),
        ModelProperty(
            id: const IdUid(3, 7437152974667463553),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2436049008783655586),
            name: 'type',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4349109435616097297),
            name: 'requirementQuantity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2866524004547762512),
            name: 'requirementMinimumOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1401788865859523023),
            name: 'rewardType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4870117294078088798),
            name: 'rewardProductType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3447742504905081862),
            name: 'rewardProductId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2605951951519822470),
            name: 'rewardVariantId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4327907195694193556),
            name: 'rewardQty',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 265528154158988542),
            name: 'discountType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4246510617900233094),
            name: 'rewardNominal',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8322847917647204010),
            name: 'rewardMaximumAmount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 3990842795393107441),
            name: 'status',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 4879958501288882950),
            name: 'allOutlet',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 123932889820976627),
            name: 'startDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 6745707545024280202),
            name: 'endDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 3012739020157620585),
            name: 'allTime',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 2310912888408070650),
            name: 'availableDays',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 6702697098729133203),
            name: 'hourly',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 1471372747533079318),
            name: 'assignCustomer',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 5583674259394667094),
            name: 'policy',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 8007876637858132545),
            name: 'needCode',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 834453567275040702),
            name: 'promoCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 5544204168005954509),
            name: 'kelipatan',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 5281459573229370384),
            name: 'priority',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 4751541431689012154),
            name: 'requirementProductType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 8150767929318900242),
            name: 'requirementProductId',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 6393326579007903868),
            name: 'requirementVariantId',
            type: 27,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 7973587441015522212),
            name: 'typeName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 5618155446441885476),
            name: 'days',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 2421560835461245344),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 6165000085069096755),
            name: 'assignCustomerName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 6480763991289462177),
            name: 'numberOfDays',
            type: 27,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 8207590432883887172),
            name: 'rewardProductName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 4337190883899751073),
            name: 'rewardItemPrice',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 5739101837765130491),
            name: 'assignGroups',
            targetId: const IdUid(6, 3416884017836823244)),
        ModelRelation(
            id: const IdUid(4, 8246245317476307642),
            name: 'itemRequirements',
            targetId: const IdUid(7, 4037611196117836389)),
        ModelRelation(
            id: const IdUid(5, 4292434469509689165),
            name: 'times',
            targetId: const IdUid(9, 6866509367297658477))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 6866509367297658477),
      name: 'PromotionTime',
      lastPropertyId: const IdUid(4, 6223551882697405910),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4520000504356177044),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4398357262149878789),
            name: 'idTime',
            type: 9,
            flags: 2048,
            indexId: const IdUid(9, 6682668095946242446)),
        ModelProperty(
            id: const IdUid(3, 2035670175459239340),
            name: 'startTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6223551882697405910),
            name: 'endTime',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(9, 6866509367297658477),
      lastIndexId: const IdUid(9, 6682668095946242446),
      lastRelationId: const IdUid(5, 4292434469509689165),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [1635103525226085433],
      retiredIndexUids: const [7883267410381292325],
      retiredPropertyUids: const [
        2528578218671652427,
        2500372705215824124,
        2694456837081178202,
        2313739355496204792,
        6976850069729385519,
        7787553384316367236,
        99422132955334410,
        1437827764907618576,
        322274413497052247,
        4522183406119997871,
        5905542364470143800,
        4281070565156541539,
        1060182228529851554,
        3967465453323153362,
        954678443802198985,
        7263508011843470340,
        5556849760840144723,
        4472040544065130066,
        7680705044695976136,
        8407400109989957200,
        4333639740043622259,
        8380541222888698591,
        1767558930106195153
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Category: EntityDefinition<Category>(
        model: _entities[0],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final idCategoryOffset = fbb.writeString(object.idCategory);
          final categoryNameOffset = fbb.writeString(object.categoryName);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, idCategoryOffset);
          fbb.addOffset(2, categoryNameOffset);
          fbb.addBool(3, object.isActive);
          fbb.addOffset(4, codeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idCategoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final categoryNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final isActiveParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final object = Category(
              id: idParam,
              idCategory: idCategoryParam,
              code: codeParam,
              categoryName: categoryNameParam,
              isActive: isActiveParam);

          return object;
        }),
    ItemPackage: EntityDefinition<ItemPackage>(
        model: _entities[1],
        toOneRelations: (ItemPackage object) => [],
        toManyRelations: (ItemPackage object) => {},
        getId: (ItemPackage object) => object.id,
        setId: (ItemPackage object, int id) {
          object.id = id;
        },
        objectToFB: (ItemPackage object, fb.Builder fbb) {
          final idItemOffset = fbb.writeString(object.idItem);
          final itemNameOffset = fbb.writeString(object.itemName);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, idItemOffset);
          fbb.addOffset(2, itemNameOffset);
          fbb.addInt64(3, object.variantId);
          fbb.addInt64(4, object.quantityItem);
          fbb.addFloat64(5, object.itemPrice);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idItemParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final itemNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final variantIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final quantityItemParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final itemPriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = ItemPackage(
              id: idParam,
              idItem: idItemParam,
              itemName: itemNameParam,
              variantId: variantIdParam,
              quantityItem: quantityItemParam,
              itemPrice: itemPriceParam);

          return object;
        }),
    ItemVariant: EntityDefinition<ItemVariant>(
        model: _entities[2],
        toOneRelations: (ItemVariant object) => [],
        toManyRelations: (ItemVariant object) => {},
        getId: (ItemVariant object) => object.id,
        setId: (ItemVariant object, int id) {
          object.id = id;
        },
        objectToFB: (ItemVariant object, fb.Builder fbb) {
          final variantNameOffset = fbb.writeString(object.variantName);
          final skuNumberOffset = object.skuNumber == null
              ? null
              : fbb.writeString(object.skuNumber!);
          final barcodeNumberOffset = object.barcodeNumber == null
              ? null
              : fbb.writeString(object.barcodeNumber!);
          final promotionsOffset = object.promotions == null
              ? null
              : fbb.writeList(object.promotions!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.idVariant);
          fbb.addOffset(2, variantNameOffset);
          fbb.addFloat64(3, object.itemPrice);
          fbb.addFloat64(4, object.stockItem);
          fbb.addOffset(5, skuNumberOffset);
          fbb.addOffset(6, barcodeNumberOffset);
          fbb.addOffset(7, promotionsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idVariantParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final itemPriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final skuNumberParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final barcodeNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final variantNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final stockItemParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final promotionsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 18);
          final object = ItemVariant(
              id: idParam,
              idVariant: idVariantParam,
              itemPrice: itemPriceParam,
              skuNumber: skuNumberParam,
              barcodeNumber: barcodeNumberParam,
              variantName: variantNameParam,
              stockItem: stockItemParam,
              promotions: promotionsParam);

          return object;
        }),
    Item: EntityDefinition<Item>(
        model: _entities[3],
        toOneRelations: (Item object) => [],
        toManyRelations: (Item object) => {
              RelInfo<Item>.toMany(1, object.id): object.variants,
              RelInfo<Item>.toMany(2, object.id): object.packageItems
            },
        getId: (Item object) => object.id,
        setId: (Item object, int id) {
          object.id = id;
        },
        objectToFB: (Item object, fb.Builder fbb) {
          final idItemOffset = fbb.writeString(object.idItem);
          final itemNameOffset = fbb.writeString(object.itemName);
          final idCategoryOffset = fbb.writeString(object.idCategory);
          final skuOffset =
              object.sku == null ? null : fbb.writeString(object.sku!);
          final barcodeOffset =
              object.barcode == null ? null : fbb.writeString(object.barcode!);
          final categoryNameOffset = object.categoryName == null
              ? null
              : fbb.writeString(object.categoryName!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final promotionsOffset = object.promotions == null
              ? null
              : fbb.writeList(object.promotions!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final packageCategoriesOffset = object.packageCategories == null
              ? null
              : fbb.writeList(object.packageCategories!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(20);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, idItemOffset);
          fbb.addOffset(2, itemNameOffset);
          fbb.addFloat64(3, object.itemPrice);
          fbb.addBool(4, object.isActive);
          fbb.addBool(5, object.obsolete);
          fbb.addBool(6, object.isPackage);
          fbb.addBool(7, object.manualDiscount);
          fbb.addBool(8, object.isManualPrice);
          fbb.addBool(9, object.stockControl);
          fbb.addOffset(10, idCategoryOffset);
          fbb.addFloat64(11, object.stockItem);
          fbb.addOffset(12, skuOffset);
          fbb.addOffset(13, barcodeOffset);
          fbb.addOffset(14, categoryNameOffset);
          fbb.addOffset(15, imageOffset);
          fbb.addInt64(
              16,
              object.lastAdjustment == null
                  ? null
                  : object.lastAdjustment!.microsecondsSinceEpoch * 1000);
          fbb.addOffset(17, promotionsOffset);
          fbb.addOffset(18, packageCategoriesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastAdjustmentValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 36);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idItemParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final itemNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final itemPriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final isActiveParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final obsoleteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final isPackageParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final skuParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final barcodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final manualDiscountParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final isManualPriceParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final stockControlParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final idCategoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final categoryNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final stockItemParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final lastAdjustmentParam = lastAdjustmentValue == null
              ? null
              : DateTime.fromMicrosecondsSinceEpoch(
                  (lastAdjustmentValue / 1000).round());
          final packageCategoriesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 40);
          final promotionsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 38);
          final variantsParam = ToMany<ItemVariant>();
          final packageItemsParam = ToMany<ItemPackage>();
          final object = Item(
              id: idParam,
              idItem: idItemParam,
              itemName: itemNameParam,
              itemPrice: itemPriceParam,
              isActive: isActiveParam,
              obsolete: obsoleteParam,
              isPackage: isPackageParam,
              sku: skuParam,
              barcode: barcodeParam,
              manualDiscount: manualDiscountParam,
              isManualPrice: isManualPriceParam,
              stockControl: stockControlParam,
              idCategory: idCategoryParam,
              categoryName: categoryNameParam,
              stockItem: stockItemParam,
              image: imageParam,
              lastAdjustment: lastAdjustmentParam,
              packageCategories: packageCategoriesParam,
              promotions: promotionsParam,
              variants: variantsParam,
              packageItems: packageItemsParam);
          InternalToManyAccess.setRelInfo<Item>(
              object.variants, store, RelInfo<Item>.toMany(1, object.id));
          InternalToManyAccess.setRelInfo<Item>(
              object.packageItems, store, RelInfo<Item>.toMany(2, object.id));
          return object;
        }),
    AssignGroup: EntityDefinition<AssignGroup>(
        model: _entities[4],
        toOneRelations: (AssignGroup object) => [],
        toManyRelations: (AssignGroup object) => {},
        getId: (AssignGroup object) => object.id,
        setId: (AssignGroup object, int id) {
          object.id = id;
        },
        objectToFB: (AssignGroup object, fb.Builder fbb) {
          final groupNameOffset = fbb.writeString(object.groupName);
          final idAssignGroupOffset = fbb.writeString(object.idAssignGroup);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.groupId);
          fbb.addOffset(3, groupNameOffset);
          fbb.addOffset(4, idAssignGroupOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idAssignGroupParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final groupIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final groupNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = AssignGroup(
              id: idParam,
              idAssignGroup: idAssignGroupParam,
              groupId: groupIdParam,
              groupName: groupNameParam);

          return object;
        }),
    ItemRequirement: EntityDefinition<ItemRequirement>(
        model: _entities[5],
        toOneRelations: (ItemRequirement object) => [],
        toManyRelations: (ItemRequirement object) => {},
        getId: (ItemRequirement object) => object.id,
        setId: (ItemRequirement object, int id) {
          object.id = id;
        },
        objectToFB: (ItemRequirement object, fb.Builder fbb) {
          final requirementProductIdOffset = object.requirementProductId == null
              ? null
              : fbb.writeString(object.requirementProductId!);
          final requirementProductNameOffset =
              object.requirementProductName == null
                  ? null
                  : fbb.writeString(object.requirementProductName!);
          final idItemRequirementOffset =
              fbb.writeString(object.idItemRequirement);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.requirementProductType);
          fbb.addOffset(3, requirementProductIdOffset);
          fbb.addInt64(4, object.requirementVariantId);
          fbb.addOffset(5, requirementProductNameOffset);
          fbb.addOffset(6, idItemRequirementOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idItemRequirementParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final requirementProductTypeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final requirementProductIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final requirementVariantIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final requirementProductNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final object = ItemRequirement(
              id: idParam,
              idItemRequirement: idItemRequirementParam,
              requirementProductType: requirementProductTypeParam,
              requirementProductId: requirementProductIdParam,
              requirementVariantId: requirementVariantIdParam,
              requirementProductName: requirementProductNameParam);

          return object;
        }),
    Promotion: EntityDefinition<Promotion>(
        model: _entities[6],
        toOneRelations: (Promotion object) => [],
        toManyRelations: (Promotion object) => {
              RelInfo<Promotion>.toMany(3, object.id): object.assignGroups,
              RelInfo<Promotion>.toMany(4, object.id): object.itemRequirements,
              RelInfo<Promotion>.toMany(5, object.id): object.times
            },
        getId: (Promotion object) => object.id,
        setId: (Promotion object, int id) {
          object.id = id;
        },
        objectToFB: (Promotion object, fb.Builder fbb) {
          final idPromotionOffset = fbb.writeString(object.idPromotion);
          final nameOffset = fbb.writeString(object.name);
          final rewardProductIdOffset = object.rewardProductId == null
              ? null
              : fbb.writeString(object.rewardProductId!);
          final availableDaysOffset = object.availableDays == null
              ? null
              : fbb.writeString(object.availableDays!);
          final promoCodeOffset = object.promoCode == null
              ? null
              : fbb.writeString(object.promoCode!);
          final requirementProductIdOffset = object.requirementProductId == null
              ? null
              : fbb.writeList(object.requirementProductId!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final requirementVariantIdOffset = object.requirementVariantId == null
              ? null
              : fbb.writeListInt64(object.requirementVariantId!);
          final typeNameOffset = object.typeName == null
              ? null
              : fbb.writeString(object.typeName!);
          final daysOffset = object.days == null
              ? null
              : fbb.writeList(
                  object.days!.map(fbb.writeString).toList(growable: false));
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final assignCustomerNameOffset = object.assignCustomerName == null
              ? null
              : fbb.writeString(object.assignCustomerName!);
          final numberOfDaysOffset = object.numberOfDays == null
              ? null
              : fbb.writeListInt64(object.numberOfDays!);
          final rewardProductNameOffset = object.rewardProductName == null
              ? null
              : fbb.writeString(object.rewardProductName!);
          fbb.startTable(38);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, idPromotionOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.type);
          fbb.addInt64(4, object.requirementQuantity);
          fbb.addInt64(5, object.requirementMinimumOrder);
          fbb.addInt64(6, object.rewardType);
          fbb.addInt64(7, object.rewardProductType);
          fbb.addOffset(8, rewardProductIdOffset);
          fbb.addInt64(9, object.rewardVariantId);
          fbb.addInt64(10, object.rewardQty);
          fbb.addInt64(11, object.discountType);
          fbb.addInt64(12, object.rewardNominal);
          fbb.addInt64(13, object.rewardMaximumAmount);
          fbb.addBool(14, object.status);
          fbb.addBool(15, object.allOutlet);
          fbb.addInt64(16, object.startDate?.millisecondsSinceEpoch);
          fbb.addInt64(17, object.endDate?.millisecondsSinceEpoch);
          fbb.addBool(18, object.allTime);
          fbb.addOffset(19, availableDaysOffset);
          fbb.addBool(20, object.hourly);
          fbb.addBool(21, object.assignCustomer);
          fbb.addBool(22, object.policy);
          fbb.addBool(23, object.needCode);
          fbb.addOffset(24, promoCodeOffset);
          fbb.addBool(25, object.kelipatan);
          fbb.addInt64(26, object.priority);
          fbb.addInt64(27, object.requirementProductType);
          fbb.addOffset(28, requirementProductIdOffset);
          fbb.addOffset(29, requirementVariantIdOffset);
          fbb.addOffset(30, typeNameOffset);
          fbb.addOffset(31, daysOffset);
          fbb.addOffset(32, descriptionOffset);
          fbb.addOffset(33, assignCustomerNameOffset);
          fbb.addOffset(34, numberOfDaysOffset);
          fbb.addOffset(35, rewardProductNameOffset);
          fbb.addInt64(36, object.rewardItemPrice);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final startDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 36);
          final endDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 38);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idPromotionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final typeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final requirementQuantityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final requirementMinimumOrderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final rewardTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final rewardProductTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final rewardProductIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final rewardVariantIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final rewardQtyParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final discountTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26);
          final rewardNominalParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final rewardMaximumAmountParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30);
          final statusParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 32, false);
          final allOutletParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 34, false);
          final startDateParam = startDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(startDateValue);
          final endDateParam = endDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(endDateValue);
          final allTimeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 40, false);
          final availableDaysParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 42);
          final hourlyParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 44, false);
          final assignCustomerParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 46, false);
          final policyParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 48, false);
          final needCodeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 50, false);
          final promoCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 52);
          final kelipatanParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 54, false);
          final priorityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 56);
          final requirementProductTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 58);
          final requirementProductIdParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 60);
          final requirementVariantIdParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 62);
          final typeNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 64);
          final daysParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 66);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 68);
          final assignCustomerNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 70);
          final numberOfDaysParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 72);
          final rewardProductNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 74);
          final rewardItemPriceParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 76);
          final timesParam = ToMany<PromotionTime>();
          final assignGroupsParam = ToMany<AssignGroup>();
          final itemRequirementsParam = ToMany<ItemRequirement>();
          final object = Promotion(
              id: idParam,
              idPromotion: idPromotionParam,
              name: nameParam,
              type: typeParam,
              requirementQuantity: requirementQuantityParam,
              requirementMinimumOrder: requirementMinimumOrderParam,
              rewardType: rewardTypeParam,
              rewardProductType: rewardProductTypeParam,
              rewardProductId: rewardProductIdParam,
              rewardVariantId: rewardVariantIdParam,
              rewardQty: rewardQtyParam,
              discountType: discountTypeParam,
              rewardNominal: rewardNominalParam,
              rewardMaximumAmount: rewardMaximumAmountParam,
              status: statusParam,
              allOutlet: allOutletParam,
              startDate: startDateParam,
              endDate: endDateParam,
              allTime: allTimeParam,
              availableDays: availableDaysParam,
              hourly: hourlyParam,
              assignCustomer: assignCustomerParam,
              policy: policyParam,
              needCode: needCodeParam,
              promoCode: promoCodeParam,
              kelipatan: kelipatanParam,
              priority: priorityParam,
              requirementProductType: requirementProductTypeParam,
              requirementProductId: requirementProductIdParam,
              requirementVariantId: requirementVariantIdParam,
              typeName: typeNameParam,
              days: daysParam,
              description: descriptionParam,
              assignCustomerName: assignCustomerNameParam,
              numberOfDays: numberOfDaysParam,
              rewardProductName: rewardProductNameParam,
              rewardItemPrice: rewardItemPriceParam,
              times: timesParam,
              assignGroups: assignGroupsParam,
              itemRequirements: itemRequirementsParam);
          InternalToManyAccess.setRelInfo<Promotion>(object.assignGroups, store,
              RelInfo<Promotion>.toMany(3, object.id));
          InternalToManyAccess.setRelInfo<Promotion>(object.itemRequirements,
              store, RelInfo<Promotion>.toMany(4, object.id));
          InternalToManyAccess.setRelInfo<Promotion>(
              object.times, store, RelInfo<Promotion>.toMany(5, object.id));
          return object;
        }),
    PromotionTime: EntityDefinition<PromotionTime>(
        model: _entities[7],
        toOneRelations: (PromotionTime object) => [],
        toManyRelations: (PromotionTime object) => {},
        getId: (PromotionTime object) => object.id,
        setId: (PromotionTime object, int id) {
          object.id = id;
        },
        objectToFB: (PromotionTime object, fb.Builder fbb) {
          final idTimeOffset = fbb.writeString(object.idTime);
          final startTimeOffset = fbb.writeString(object.startTime);
          final endTimeOffset = fbb.writeString(object.endTime);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, idTimeOffset);
          fbb.addOffset(2, startTimeOffset);
          fbb.addOffset(3, endTimeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final startTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final endTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = PromotionTime(
              id: idParam,
              idTime: idTimeParam,
              startTime: startTimeParam,
              endTime: endTimeParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// see [Category.id]
  static final id = QueryIntegerProperty<Category>(_entities[0].properties[0]);

  /// see [Category.idCategory]
  static final idCategory =
      QueryStringProperty<Category>(_entities[0].properties[1]);

  /// see [Category.categoryName]
  static final categoryName =
      QueryStringProperty<Category>(_entities[0].properties[2]);

  /// see [Category.isActive]
  static final isActive =
      QueryBooleanProperty<Category>(_entities[0].properties[3]);

  /// see [Category.code]
  static final code = QueryStringProperty<Category>(_entities[0].properties[4]);
}

/// [ItemPackage] entity fields to define ObjectBox queries.
class ItemPackage_ {
  /// see [ItemPackage.id]
  static final id =
      QueryIntegerProperty<ItemPackage>(_entities[1].properties[0]);

  /// see [ItemPackage.idItem]
  static final idItem =
      QueryStringProperty<ItemPackage>(_entities[1].properties[1]);

  /// see [ItemPackage.itemName]
  static final itemName =
      QueryStringProperty<ItemPackage>(_entities[1].properties[2]);

  /// see [ItemPackage.variantId]
  static final variantId =
      QueryIntegerProperty<ItemPackage>(_entities[1].properties[3]);

  /// see [ItemPackage.quantityItem]
  static final quantityItem =
      QueryIntegerProperty<ItemPackage>(_entities[1].properties[4]);

  /// see [ItemPackage.itemPrice]
  static final itemPrice =
      QueryDoubleProperty<ItemPackage>(_entities[1].properties[5]);
}

/// [ItemVariant] entity fields to define ObjectBox queries.
class ItemVariant_ {
  /// see [ItemVariant.id]
  static final id =
      QueryIntegerProperty<ItemVariant>(_entities[2].properties[0]);

  /// see [ItemVariant.idVariant]
  static final idVariant =
      QueryIntegerProperty<ItemVariant>(_entities[2].properties[1]);

  /// see [ItemVariant.variantName]
  static final variantName =
      QueryStringProperty<ItemVariant>(_entities[2].properties[2]);

  /// see [ItemVariant.itemPrice]
  static final itemPrice =
      QueryDoubleProperty<ItemVariant>(_entities[2].properties[3]);

  /// see [ItemVariant.stockItem]
  static final stockItem =
      QueryDoubleProperty<ItemVariant>(_entities[2].properties[4]);

  /// see [ItemVariant.skuNumber]
  static final skuNumber =
      QueryStringProperty<ItemVariant>(_entities[2].properties[5]);

  /// see [ItemVariant.barcodeNumber]
  static final barcodeNumber =
      QueryStringProperty<ItemVariant>(_entities[2].properties[6]);

  /// see [ItemVariant.promotions]
  static final promotions =
      QueryStringVectorProperty<ItemVariant>(_entities[2].properties[7]);
}

/// [Item] entity fields to define ObjectBox queries.
class Item_ {
  /// see [Item.id]
  static final id = QueryIntegerProperty<Item>(_entities[3].properties[0]);

  /// see [Item.idItem]
  static final idItem = QueryStringProperty<Item>(_entities[3].properties[1]);

  /// see [Item.itemName]
  static final itemName = QueryStringProperty<Item>(_entities[3].properties[2]);

  /// see [Item.itemPrice]
  static final itemPrice =
      QueryDoubleProperty<Item>(_entities[3].properties[3]);

  /// see [Item.isActive]
  static final isActive =
      QueryBooleanProperty<Item>(_entities[3].properties[4]);

  /// see [Item.obsolete]
  static final obsolete =
      QueryBooleanProperty<Item>(_entities[3].properties[5]);

  /// see [Item.isPackage]
  static final isPackage =
      QueryBooleanProperty<Item>(_entities[3].properties[6]);

  /// see [Item.manualDiscount]
  static final manualDiscount =
      QueryBooleanProperty<Item>(_entities[3].properties[7]);

  /// see [Item.isManualPrice]
  static final isManualPrice =
      QueryBooleanProperty<Item>(_entities[3].properties[8]);

  /// see [Item.stockControl]
  static final stockControl =
      QueryBooleanProperty<Item>(_entities[3].properties[9]);

  /// see [Item.idCategory]
  static final idCategory =
      QueryStringProperty<Item>(_entities[3].properties[10]);

  /// see [Item.stockItem]
  static final stockItem =
      QueryDoubleProperty<Item>(_entities[3].properties[11]);

  /// see [Item.sku]
  static final sku = QueryStringProperty<Item>(_entities[3].properties[12]);

  /// see [Item.barcode]
  static final barcode = QueryStringProperty<Item>(_entities[3].properties[13]);

  /// see [Item.categoryName]
  static final categoryName =
      QueryStringProperty<Item>(_entities[3].properties[14]);

  /// see [Item.image]
  static final image = QueryStringProperty<Item>(_entities[3].properties[15]);

  /// see [Item.lastAdjustment]
  static final lastAdjustment =
      QueryIntegerProperty<Item>(_entities[3].properties[16]);

  /// see [Item.promotions]
  static final promotions =
      QueryStringVectorProperty<Item>(_entities[3].properties[17]);

  /// see [Item.packageCategories]
  static final packageCategories =
      QueryStringVectorProperty<Item>(_entities[3].properties[18]);

  /// see [Item.variants]
  static final variants =
      QueryRelationToMany<Item, ItemVariant>(_entities[3].relations[0]);

  /// see [Item.packageItems]
  static final packageItems =
      QueryRelationToMany<Item, ItemPackage>(_entities[3].relations[1]);
}

/// [AssignGroup] entity fields to define ObjectBox queries.
class AssignGroup_ {
  /// see [AssignGroup.id]
  static final id =
      QueryIntegerProperty<AssignGroup>(_entities[4].properties[0]);

  /// see [AssignGroup.groupId]
  static final groupId =
      QueryIntegerProperty<AssignGroup>(_entities[4].properties[1]);

  /// see [AssignGroup.groupName]
  static final groupName =
      QueryStringProperty<AssignGroup>(_entities[4].properties[2]);

  /// see [AssignGroup.idAssignGroup]
  static final idAssignGroup =
      QueryStringProperty<AssignGroup>(_entities[4].properties[3]);
}

/// [ItemRequirement] entity fields to define ObjectBox queries.
class ItemRequirement_ {
  /// see [ItemRequirement.id]
  static final id =
      QueryIntegerProperty<ItemRequirement>(_entities[5].properties[0]);

  /// see [ItemRequirement.requirementProductType]
  static final requirementProductType =
      QueryIntegerProperty<ItemRequirement>(_entities[5].properties[1]);

  /// see [ItemRequirement.requirementProductId]
  static final requirementProductId =
      QueryStringProperty<ItemRequirement>(_entities[5].properties[2]);

  /// see [ItemRequirement.requirementVariantId]
  static final requirementVariantId =
      QueryIntegerProperty<ItemRequirement>(_entities[5].properties[3]);

  /// see [ItemRequirement.requirementProductName]
  static final requirementProductName =
      QueryStringProperty<ItemRequirement>(_entities[5].properties[4]);

  /// see [ItemRequirement.idItemRequirement]
  static final idItemRequirement =
      QueryStringProperty<ItemRequirement>(_entities[5].properties[5]);
}

/// [Promotion] entity fields to define ObjectBox queries.
class Promotion_ {
  /// see [Promotion.id]
  static final id = QueryIntegerProperty<Promotion>(_entities[6].properties[0]);

  /// see [Promotion.idPromotion]
  static final idPromotion =
      QueryStringProperty<Promotion>(_entities[6].properties[1]);

  /// see [Promotion.name]
  static final name =
      QueryStringProperty<Promotion>(_entities[6].properties[2]);

  /// see [Promotion.type]
  static final type =
      QueryIntegerProperty<Promotion>(_entities[6].properties[3]);

  /// see [Promotion.requirementQuantity]
  static final requirementQuantity =
      QueryIntegerProperty<Promotion>(_entities[6].properties[4]);

  /// see [Promotion.requirementMinimumOrder]
  static final requirementMinimumOrder =
      QueryIntegerProperty<Promotion>(_entities[6].properties[5]);

  /// see [Promotion.rewardType]
  static final rewardType =
      QueryIntegerProperty<Promotion>(_entities[6].properties[6]);

  /// see [Promotion.rewardProductType]
  static final rewardProductType =
      QueryIntegerProperty<Promotion>(_entities[6].properties[7]);

  /// see [Promotion.rewardProductId]
  static final rewardProductId =
      QueryStringProperty<Promotion>(_entities[6].properties[8]);

  /// see [Promotion.rewardVariantId]
  static final rewardVariantId =
      QueryIntegerProperty<Promotion>(_entities[6].properties[9]);

  /// see [Promotion.rewardQty]
  static final rewardQty =
      QueryIntegerProperty<Promotion>(_entities[6].properties[10]);

  /// see [Promotion.discountType]
  static final discountType =
      QueryIntegerProperty<Promotion>(_entities[6].properties[11]);

  /// see [Promotion.rewardNominal]
  static final rewardNominal =
      QueryIntegerProperty<Promotion>(_entities[6].properties[12]);

  /// see [Promotion.rewardMaximumAmount]
  static final rewardMaximumAmount =
      QueryIntegerProperty<Promotion>(_entities[6].properties[13]);

  /// see [Promotion.status]
  static final status =
      QueryBooleanProperty<Promotion>(_entities[6].properties[14]);

  /// see [Promotion.allOutlet]
  static final allOutlet =
      QueryBooleanProperty<Promotion>(_entities[6].properties[15]);

  /// see [Promotion.startDate]
  static final startDate =
      QueryIntegerProperty<Promotion>(_entities[6].properties[16]);

  /// see [Promotion.endDate]
  static final endDate =
      QueryIntegerProperty<Promotion>(_entities[6].properties[17]);

  /// see [Promotion.allTime]
  static final allTime =
      QueryBooleanProperty<Promotion>(_entities[6].properties[18]);

  /// see [Promotion.availableDays]
  static final availableDays =
      QueryStringProperty<Promotion>(_entities[6].properties[19]);

  /// see [Promotion.hourly]
  static final hourly =
      QueryBooleanProperty<Promotion>(_entities[6].properties[20]);

  /// see [Promotion.assignCustomer]
  static final assignCustomer =
      QueryBooleanProperty<Promotion>(_entities[6].properties[21]);

  /// see [Promotion.policy]
  static final policy =
      QueryBooleanProperty<Promotion>(_entities[6].properties[22]);

  /// see [Promotion.needCode]
  static final needCode =
      QueryBooleanProperty<Promotion>(_entities[6].properties[23]);

  /// see [Promotion.promoCode]
  static final promoCode =
      QueryStringProperty<Promotion>(_entities[6].properties[24]);

  /// see [Promotion.kelipatan]
  static final kelipatan =
      QueryBooleanProperty<Promotion>(_entities[6].properties[25]);

  /// see [Promotion.priority]
  static final priority =
      QueryIntegerProperty<Promotion>(_entities[6].properties[26]);

  /// see [Promotion.requirementProductType]
  static final requirementProductType =
      QueryIntegerProperty<Promotion>(_entities[6].properties[27]);

  /// see [Promotion.requirementProductId]
  static final requirementProductId =
      QueryStringVectorProperty<Promotion>(_entities[6].properties[28]);

  /// see [Promotion.requirementVariantId]
  static final requirementVariantId =
      QueryIntegerVectorProperty<Promotion>(_entities[6].properties[29]);

  /// see [Promotion.typeName]
  static final typeName =
      QueryStringProperty<Promotion>(_entities[6].properties[30]);

  /// see [Promotion.days]
  static final days =
      QueryStringVectorProperty<Promotion>(_entities[6].properties[31]);

  /// see [Promotion.description]
  static final description =
      QueryStringProperty<Promotion>(_entities[6].properties[32]);

  /// see [Promotion.assignCustomerName]
  static final assignCustomerName =
      QueryStringProperty<Promotion>(_entities[6].properties[33]);

  /// see [Promotion.numberOfDays]
  static final numberOfDays =
      QueryIntegerVectorProperty<Promotion>(_entities[6].properties[34]);

  /// see [Promotion.rewardProductName]
  static final rewardProductName =
      QueryStringProperty<Promotion>(_entities[6].properties[35]);

  /// see [Promotion.rewardItemPrice]
  static final rewardItemPrice =
      QueryIntegerProperty<Promotion>(_entities[6].properties[36]);

  /// see [Promotion.assignGroups]
  static final assignGroups =
      QueryRelationToMany<Promotion, AssignGroup>(_entities[6].relations[0]);

  /// see [Promotion.itemRequirements]
  static final itemRequirements =
      QueryRelationToMany<Promotion, ItemRequirement>(
          _entities[6].relations[1]);

  /// see [Promotion.times]
  static final times =
      QueryRelationToMany<Promotion, PromotionTime>(_entities[6].relations[2]);
}

/// [PromotionTime] entity fields to define ObjectBox queries.
class PromotionTime_ {
  /// see [PromotionTime.id]
  static final id =
      QueryIntegerProperty<PromotionTime>(_entities[7].properties[0]);

  /// see [PromotionTime.idTime]
  static final idTime =
      QueryStringProperty<PromotionTime>(_entities[7].properties[1]);

  /// see [PromotionTime.startTime]
  static final startTime =
      QueryStringProperty<PromotionTime>(_entities[7].properties[2]);

  /// see [PromotionTime.endTime]
  static final endTime =
      QueryStringProperty<PromotionTime>(_entities[7].properties[3]);
}
