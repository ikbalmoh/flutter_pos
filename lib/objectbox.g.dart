// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/category.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5401018273546124526),
      name: 'Category',
      lastPropertyId: const IdUid(17, 4281070565156541539),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8257658666386374924),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9159864238056959842),
            name: 'idCategory',
            type: 9,
            flags: 2048,
            indexId: const IdUid(1, 4905264527371129061)),
        ModelProperty(
            id: const IdUid(3, 5027307927516392943),
            name: 'categoryName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8413388841854697352),
            name: 'isActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5300184411732820873),
            name: 'code',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 5401018273546124526),
      lastIndexId: const IdUid(1, 4905264527371129061),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        2528578218671652427,
        2500372705215824124,
        2694456837081178202,
        2313739355496204792,
        6976850069729385519,
        7787553384316367236,
        99422132955334410,
        1437827764907618576,
        322274413497052247,
        4522183406119997871,
        5905542364470143800,
        4281070565156541539
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Category: EntityDefinition<Category>(
        model: _entities[0],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final idCategoryOffset = fbb.writeString(object.idCategory);
          final categoryNameOffset = fbb.writeString(object.categoryName);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, idCategoryOffset);
          fbb.addOffset(2, categoryNameOffset);
          fbb.addBool(3, object.isActive);
          fbb.addOffset(4, codeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idCategoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final categoryNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final isActiveParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final object = Category(
              id: idParam,
              idCategory: idCategoryParam,
              code: codeParam,
              categoryName: categoryNameParam,
              isActive: isActiveParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// see [Category.id]
  static final id = QueryIntegerProperty<Category>(_entities[0].properties[0]);

  /// see [Category.idCategory]
  static final idCategory =
      QueryStringProperty<Category>(_entities[0].properties[1]);

  /// see [Category.categoryName]
  static final categoryName =
      QueryStringProperty<Category>(_entities[0].properties[2]);

  /// see [Category.isActive]
  static final isActive =
      QueryBooleanProperty<Category>(_entities[0].properties[3]);

  /// see [Category.code]
  static final code = QueryStringProperty<Category>(_entities[0].properties[4]);
}
